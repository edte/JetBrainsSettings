<application>
  <component name="AppStorage">
    <histories>
      <item value="锁" />
      <item value="lock" />
      <item value="awake" />
      <item value="* Note that some architectures have special knowledge about the * stack frames of these functions in their profile_pc. If you * change anything significant here that could change the stack * frame contact the architecture maintainers." />
      <item value="down interruptible" />
      <item value="deprecated" />
      <item value="* The spinlock controls access to the other members of the semaphore. * down_trylock() and up() can be called from interrupt context, so we * have to disable interrupts when taking the lock. It turns out various * parts of the kernel expect to be able to use down() on a semaphore in * interrupt context when they know it will succeed, so we have to use * irqsave variants for down(), down_interruptible() and down_killable() * too." />
      <item value="* The spinlock controls access to the other members of the semaphore." />
      <item value="* This file implements counting semaphores. * A counting semaphore may be acquired 'n' times before sleeping. * See mutex.c for single-acquisition sleeping locks which enforce * rules which allow code to be debugged more easily" />
      <item value="single-acquisition" />
      <item value="counting semaphores" />
      <item value="implements" />
      <item value="detach" />
      <item value="pthread detach" />
      <item value="优先级" />
      <item value="计算" />
      <item value="合并" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="15" />
        <entry key="ENGLISH" value="15" />
      </map>
    </option>
  </component>
</application>